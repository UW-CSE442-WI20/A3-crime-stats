{"version":3,"sources":["index.js"],"names":["d3","json","error","cityofchicago","console","log","width","center","geo","centroid","scale","projection","mercator","path","bounds","hscale","vscale","offset","translate","select","attr","selectAll","data","features","enter","append"],"mappings":";AAAAA,GAAGC,KAAK,yEAA0E,SAASC,EAAOC,GAC1FD,GAAAA,EAAO,MAAMA,EAEjBE,QAAQC,IAAIF,GAGRG,IAIAC,EAASP,GAAGQ,IAAIC,SAASN,GACzBO,EAAQ,IACRC,EAAaX,GAAGQ,IAAII,WAAWF,MAAMA,GAAOH,OAAOA,GAEnDM,EAAOb,GAAGQ,IAAIK,OACDF,WAAWA,GAIxBG,EAASD,EAAKC,OAAOX,GACrBY,EAdQ,IAcCL,GAAiBI,EAAO,GAAG,GAAKA,EAAO,GAAG,IACnDE,EAdS,IAcAN,GAAkBI,EAAO,GAAG,GAAKA,EAAO,GAAG,IAEpDG,GADAP,EAASK,EAASC,EAAUD,EAASC,EAC5B,CAjBD,KAiBWF,EAAO,GAAG,GAAKA,EAAO,GAAG,IAAM,EAhBzC,KAiBcA,EAAO,GAAG,GAAKA,EAAO,GAAG,IAAM,IAG1DH,EAAaX,GAAGQ,IAAII,WAAWL,OAAOA,GACpCG,MAAc,GAARA,GAAaQ,UAAUD,GAC/BJ,EAAOA,EAAKF,WAAWA,GAGbX,GAAGmB,OAAO,UACRC,KAAK,QA3BL,KA4BAA,KAAK,SA3BJ,KA8BTC,UAAU,QACXC,KAAKnB,EAAcoB,UACnBC,QACAC,OAAO,QACPL,KAAK,IAAKP,GACVO,KAAK,QAAS","file":"src.92c24ecf.js","sourceRoot":"../src","sourcesContent":["d3.json(\"https://data.cityofchicago.org/resource/ijzp-q8t2.geojson?location_zip\", function(error, cityofchicago) {\n    if (error) throw error;\n\n    console.log(cityofchicago);\n\n    //Width and height\n    var width = 900;\n    var height = 500;\n\n    // create a first guess for the projection\n    var center = d3.geo.centroid(cityofchicago)\n    var scale = 100;\n    var projection = d3.geo.mercator().scale(scale).center(center);\n    //Define path generator\n    var path = d3.geo.path()\n                    .projection(projection);\n\n    // using the path determine the bounds of the current map and use\n    // these to determine better values for the scale and translation\n    var bounds = path.bounds(cityofchicago);\n    var hscale = scale * width / (bounds[1][0] - bounds[0][0]);\n    var vscale = scale * height / (bounds[1][1] - bounds[0][1]);\n    var scale = (hscale < vscale) ? hscale : vscale;\n    var offset = [width - (bounds[0][0] + bounds[1][0]) / 2,\n                     height - (bounds[0][1] + bounds[1][1]) / 2];\n\n    // new projection\n    projection = d3.geo.mercator().center(center)\n     .scale(scale * 0.9).translate(offset);\n    path = path.projection(projection);\n\n    //Create SVG element\n    var svg = d3.select(\".chart\")\n               .attr(\"width\", width)\n               .attr(\"height\", height)\n\n    //Bind data and create one path per GeoJSON feature\n    svg.selectAll(\"path\")\n      .data(cityofchicago.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .attr(\"class\", \"zipcode\");\n});"]}